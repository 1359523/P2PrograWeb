{
	"info": {
		"_postman_id": "7962ece9-9f87-42d0-aae2-3215d25a1b78",
		"name": "Biblioteca Aurora - Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "47699025",
		"_collection_link": "https://amorataya28-6650100.postman.co/workspace/Adrian's-Workspace~0b08ee1e-8691-456c-8aa9-1934cce413a3/collection/47699025-7962ece9-9f87-42d0-aae2-3215d25a1b78?action=share&source=collection_link&creator=47699025"
	},
	"item": [
		{
			"name": "01 - GET lista de libros (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Respuesta es un arreglo', function () { pm.expect(pm.response.json()).to.be.an('array'); });"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros"
					]
				}
			},
			"response": []
		},
		{
			"name": "02 - POST crear libro (201)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// Generar título aleatorio para evitar duplicados involuntarios",
							"pm.variables.set('titleRnd', `Libro Test ${Date.now()}`);",
							"pm.variables.set('authorName', 'Ada Lovelace');",
							"pm.variables.set('yearNum', 1999);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 201', function () { pm.response.to.have.status(201); });",
							"const body = pm.response.json();",
							"pm.test('Tiene id/title/author', function () {",
							"  pm.expect(body).to.have.property('id');",
							"  pm.expect(body).to.have.property('title');",
							"  pm.expect(body).to.have.property('author');",
							"});",
							"// Guardar id para siguientes pruebas",
							"pm.environment.set('libroId', body.id);",
							"// Guardar payload para probar duplicado",
							"pm.environment.set('dupTitle', body.title);",
							"pm.environment.set('dupAuthor', body.author);",
							"pm.environment.set('dupYear', body.year);"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"{{titleRnd}}\", \"author\": \"{{authorName}}\", \"year\": \"{{yearNum}}\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/libros",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros"
					]
				}
			},
			"response": []
		},
		{
			"name": "03 - GET libro por id (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 200', function () { pm.response.to.have.status(200); });",
							"const body = pm.response.json();",
							"pm.test('Id coincide', function () { pm.expect(body.id).to.eql(pm.environment.get('libroId')); });"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros/{{libroId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros",
						"{{libroId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "04 - GET por id inválido (400)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 400', function () { pm.response.to.have.status(400); });",
							"pm.test('Tiene campo error', function () { pm.expect(pm.response.json()).to.have.property('error'); });"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros/123",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros",
						"123"
					]
				}
			},
			"response": []
		},
		{
			"name": "05 - GET por id no existente (404)",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.environment.set('uuidNotFound', pm.variables.replaceIn('{{$randomUUID}}'));"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 404', function () { pm.response.to.have.status(404); });",
							"pm.test('Tiene campo error', function () { pm.expect(pm.response.json()).to.have.property('error'); });"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros/{{uuidNotFound}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros",
						"{{uuidNotFound}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "06 - POST con faltantes (400)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 400', function () { pm.response.to.have.status(400); });",
							"pm.test('Mensaje claro', function () { pm.expect(pm.response.json()).to.have.property('error'); });"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/libros",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros"
					]
				}
			},
			"response": []
		},
		{
			"name": "07 - POST duplicado (409)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 409 (si hay validación de duplicado)', function () {",
							"  pm.expect([409,400,422,201]).to.include(pm.response.code);",
							"});",
							"// Nota: Si tu implementación no maneja duplicado, puede devolver 201 o 400 según tus reglas."
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"title\": \"{{dupTitle}}\", \"author\": \"{{dupAuthor}}\", \"year\": \"{{dupYear}}\"}"
				},
				"url": {
					"raw": "{{baseUrl}}/api/libros",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros"
					]
				}
			},
			"response": []
		},
		{
			"name": "08 - DELETE por id (200)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 200', function () { pm.response.to.have.status(200); });",
							"pm.test('Respuesta tiene message', function () { pm.expect(pm.response.json()).to.have.property('message'); });"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros/{{libroId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros",
						"{{libroId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "09 - DELETE id inexistente (404)",
			"event": [
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test('Status es 404', function () { pm.response.to.have.status(404); });",
							"pm.test('Respuesta tiene error', function () { pm.expect(pm.response.json()).to.have.property('error'); });"
						]
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api/libros/{{libroId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"libros",
						"{{libroId}}"
					]
				}
			},
			"response": []
		}
	]
}